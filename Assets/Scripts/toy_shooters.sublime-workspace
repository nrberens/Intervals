{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "Enemy/EnemyShooter.cs",
			"settings":
			{
				"buffer_size": 797,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Weapon/Bullet.cs",
			"settings":
			{
				"buffer_size": 3634,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Enemy/EnemyAI.cs",
			"settings":
			{
				"buffer_size": 2877,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using UnityEngine;\nusing System.Collections;\n\npublic class EnemyMover : MonoBehaviour, IMover {\n\n    private EnemyController _ec;\n    public float MoveTime;\n\n    // Use this for initialization\n    void Start() {\n        nodes = GameObject.Find(\"World\").GetComponent<World>().Nodes;\n        _ec = GetComponentInParent<EnemyController>();\n    }\n\n    // Update is called once per frame\n    void Update() {\n\n    }\n\n    public MoveNode[,] nodes { get; private set; }\n\n    public MoveNode currentNode { get; set; }\n\n    public void MoveUp(int distance) {\n        Debug.Log(gameObject.name + \": Moving Up\");\n        //throw new System.NotImplementedException();\n        int nodeId = currentNode.x;\n        int blockId = currentNode.z;\n\n        if (blockId >= nodes.GetUpperBound(1)) //bust out early if you're at the top of the map\n        {\n            Debug.Log(\"You hit the top! node_id= \" + nodeId + \" z = \" + blockId);\n            _ec.acting = false;\n            _ec.EndPhase();\n            return;\n        }\n\n        MoveNode targetNode = nodes[nodeId, blockId + distance];\n        StartCoroutine(MoveToNode(targetNode));\n        currentNode = targetNode;\n    }\n\n    public void MoveDown(int distance) {\n        Debug.Log(gameObject.name + \": Moving Down\");\n        //throw new System.NotImplementedException();\n        int nodeId = currentNode.x;\n        int blockId = currentNode.z;\n\n        if (blockId <= 0) {\n            Debug.Log(\"You hit the bottom! node_id= \" + nodeId + \" z = \" + blockId);\n            _ec.acting = false;\n            _ec.EndPhase();\n            return;\n        }\n\n        MoveNode targetNode = nodes[nodeId, blockId - distance];\n        StartCoroutine(MoveToNode(targetNode));\n        currentNode = targetNode;\n    }\n\n    public void MoveLeft(int distance) {\n        Debug.Log(gameObject.name + \": Moving Left\");\n        //throw new System.NotImplementedException();\n        int nodeId = currentNode.x;\n        int blockId = currentNode.z;\n\n        if (nodeId <= 0) {\n            Debug.Log(\"You hit the left! node_id= \" + nodeId + \" z = \" + blockId);\n            _ec.acting = false;\n            _ec.EndPhase();\n            return;\n        }\n\n        MoveNode targetNode = nodes[nodeId - distance, blockId];\n        StartCoroutine(MoveToNode(targetNode));\n        currentNode = targetNode;\n    }\n\n    public void MoveRight(int distance) {\n        Debug.Log(gameObject.name + \": Moving Right\");\n        //throw new System.NotImplementedException();\n        int nodeId = currentNode.x;\n        int blockId = currentNode.z;\n\n        if (nodeId >= nodes.GetUpperBound(0)) {\n            Debug.Log(\"You hit the right! node_id= \" + nodeId + \" z = \" + blockId);\n            _ec.acting = false;\n            _ec.EndPhase();\n            return;\n        }\n\n        MoveNode targetNode = nodes[nodeId + distance, blockId];\n        StartCoroutine(MoveToNode(targetNode));\n        currentNode = targetNode;\n    }\n\n    public IEnumerator MoveToNode(MoveNode targetNode) {\n        Vector3 startPos = currentNode.transform.position;\n        Vector3 endPos = targetNode.transform.position;\n        Vector3 bending = Vector3.up;\n        float startTime = Time.time;\n\n        while (Time.time < MoveTime + startTime) {\n            Vector3 currentPos = Vector3.Lerp(startPos, endPos, (Time.time - startTime) / MoveTime);\n\n            currentPos.x += bending.x * Mathf.Sin(Mathf.Clamp01((Time.time - startTime) / MoveTime) * Mathf.PI);\n            currentPos.y += bending.y * Mathf.Sin(Mathf.Clamp01((Time.time - startTime) / MoveTime) * Mathf.PI);\n            currentPos.z += bending.z * Mathf.Sin(Mathf.Clamp01((Time.time - startTime) / MoveTime) * Mathf.PI);\n\n            transform.position = currentPos;\n\n            yield return null;\n        }\n\n        _ec.acting = false;\n        _ec.EndPhase();\n    }\n\n    public void DetectCurrentNode() {\n    }\n\n}\n",
			"file": "Enemy/EnemyMover.cs",
			"file_size": 3861,
			"file_write_time": 130691840960000000,
			"settings":
			{
				"buffer_size": 3858,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Unity3D Build System/Unity.sublime-build",
	"command_palette":
	{
		"height": 67.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"list packag",
				"Package Control: List Packages"
			],
			[
				"unity",
				"Set Syntax: Unity C#"
			]
		],
		"width": 640.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/nberens/Documents/toy-shooters/Assets/Scripts",
		"/Users/nberens/Documents/toy-shooters/Assets/Scripts/Enemy"
	],
	"file_history":
	[
		"/Users/nberens/Documents/toy-shooters/Assets/Scripts/toy_shooters.sublime-project",
		"/Users/nberens/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Volumes/College on Demand/04_PODCAST_FINAL/PSY100/INSIDE_OUT/convert/convert.sh"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Enemy/EnemyShooter.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 797,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Weapon/Bullet.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3634,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Enemy/EnemyAI.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2877,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 134.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Enemy/EnemyMover.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3858,
						"regions":
						{
						},
						"selection":
						[
							[
								130,
								130
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "toy_shooters.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
